// Copyright 2016 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A ServiceConfig is supplied when a service is deployed. It mostly contains
// parameters for how clients that connect to the service should behave (for
// example, the load balancing policy to use to pick between service replicas).
//
// The configuration options provided here act as overrides to automatically
// chosen option values. Service owners should be conservative in specifying
// options as the system is likely to choose better values for these options in
// the vast majority of cases. In other words, please specify a configuration
// option only if you really have to, and avoid copy-paste inclusion of configs.
//
// Note that gRPC uses the service config in JSON form, not in protobuf
// form.  This proto definition is intended to help document the schema but
// will not actually be used directly by gRPC.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: einride/serviceconfig/v1/service_config.proto

package serviceconfigv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type int32

const (
	XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_UNKNOWN     XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type = 0
	XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_EDS         XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type = 1
	XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_LOGICAL_DNS XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type = 2
)

// Enum value maps for XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type.
var (
	XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "EDS",
		2: "LOGICAL_DNS",
	}
	XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type_value = map[string]int32{
		"UNKNOWN":     0,
		"EDS":         1,
		"LOGICAL_DNS": 2,
	}
)

func (x XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type) Enum() *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type {
	p := new(XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type)
	*p = x
	return p
}

func (x XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_einride_serviceconfig_v1_service_config_proto_enumTypes[0].Descriptor()
}

func (XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type) Type() protoreflect.EnumType {
	return &file_einride_serviceconfig_v1_service_config_proto_enumTypes[0]
}

func (x XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type.Descriptor instead.
func (XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type) EnumDescriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{10, 0, 0}
}

// Load balancing policy.
//
// Note that load_balancing_policy is deprecated in favor of
// load_balancing_config; the former will be used only if the latter
// is unset.
//
// If no LB policy is configured here, then the default is pick_first.
// If the policy name is set via the client API, that value overrides
// the value specified here.
//
// If the deprecated load_balancing_policy field is used, note that if the
// resolver returns at least one balancer address (as opposed to backend
// addresses), gRPC will use grpclb (see
// https://github.com/grpc/grpc/blob/master/doc/load-balancing.md),
// regardless of what policy is configured here.  However, if the resolver
// returns at least one backend address in addition to the balancer
// address(es), the client may fall back to the requested policy if it
// is unable to reach any of the grpclb load balancers.
type ServiceConfig_LoadBalancingPolicy int32

const (
	ServiceConfig_UNSPECIFIED ServiceConfig_LoadBalancingPolicy = 0
	ServiceConfig_ROUND_ROBIN ServiceConfig_LoadBalancingPolicy = 1
)

// Enum value maps for ServiceConfig_LoadBalancingPolicy.
var (
	ServiceConfig_LoadBalancingPolicy_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ROUND_ROBIN",
	}
	ServiceConfig_LoadBalancingPolicy_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ROUND_ROBIN": 1,
	}
)

func (x ServiceConfig_LoadBalancingPolicy) Enum() *ServiceConfig_LoadBalancingPolicy {
	p := new(ServiceConfig_LoadBalancingPolicy)
	*p = x
	return p
}

func (x ServiceConfig_LoadBalancingPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceConfig_LoadBalancingPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_einride_serviceconfig_v1_service_config_proto_enumTypes[1].Descriptor()
}

func (ServiceConfig_LoadBalancingPolicy) Type() protoreflect.EnumType {
	return &file_einride_serviceconfig_v1_service_config_proto_enumTypes[1]
}

func (x ServiceConfig_LoadBalancingPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceConfig_LoadBalancingPolicy.Descriptor instead.
func (ServiceConfig_LoadBalancingPolicy) EnumDescriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{19, 0}
}

// Configuration for a method.
type MethodConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  []*MethodConfig_Name   `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	// Whether RPCs sent to this method should wait until the connection is
	// ready by default. If false, the RPC will abort immediately if there is
	// a transient failure connecting to the server. Otherwise, gRPC will
	// attempt to connect until the deadline is exceeded.
	//
	// The value specified via the gRPC client API will override the value
	// set here. However, note that setting the value in the client API will
	// also affect transient errors encountered during name resolution, which
	// cannot be caught by the value here, since the service config is
	// obtained by the gRPC client via name resolution.
	WaitForReady *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=wait_for_ready,json=waitForReady,proto3" json:"wait_for_ready,omitempty"`
	// The default timeout in seconds for RPCs sent to this method. This can be
	// overridden in code. If no reply is received in the specified amount of
	// time, the request is aborted and a DEADLINE_EXCEEDED error status
	// is returned to the caller.
	//
	// The actual deadline used will be the minimum of the value specified here
	// and the value set by the application via the gRPC client API.  If either
	// one is not set, then the other will be used.  If neither is set, then the
	// request has no deadline.
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The maximum allowed payload size for an individual request or object in a
	// stream (client->server) in bytes. The size which is measured is the
	// serialized payload after per-message compression (but before stream
	// compression) in bytes. This applies both to streaming and non-streaming
	// requests.
	//
	// The actual value used is the minimum of the value specified here and the
	// value set by the application via the gRPC client API.  If either one is
	// not set, then the other will be used.  If neither is set, then the
	// built-in default is used.
	//
	// If a client attempts to send an object larger than this value, it will not
	// be sent and the client will see a ClientError.
	// Note that 0 is a valid value, meaning that the request message
	// must be empty.
	MaxRequestMessageBytes *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_request_message_bytes,json=maxRequestMessageBytes,proto3" json:"max_request_message_bytes,omitempty"`
	// The maximum allowed payload size for an individual response or object in a
	// stream (server->client) in bytes. The size which is measured is the
	// serialized payload after per-message compression (but before stream
	// compression) in bytes. This applies both to streaming and non-streaming
	// requests.
	//
	// The actual value used is the minimum of the value specified here and the
	// value set by the application via the gRPC client API.  If either one is
	// not set, then the other will be used.  If neither is set, then the
	// built-in default is used.
	//
	// If a server attempts to send an object larger than this value, it will not
	// be sent, and a ServerError will be sent to the client instead.
	// Note that 0 is a valid value, meaning that the response message
	// must be empty.
	MaxResponseMessageBytes *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=max_response_message_bytes,json=maxResponseMessageBytes,proto3" json:"max_response_message_bytes,omitempty"`
	// Only one of retry_policy or hedging_policy may be set. If neither is set,
	// RPCs will not be retried or hedged.
	//
	// Types that are valid to be assigned to RetryOrHedgingPolicy:
	//
	//	*MethodConfig_RetryPolicy_
	//	*MethodConfig_HedgingPolicy_
	RetryOrHedgingPolicy isMethodConfig_RetryOrHedgingPolicy `protobuf_oneof:"retry_or_hedging_policy"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MethodConfig) Reset() {
	*x = MethodConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodConfig) ProtoMessage() {}

func (x *MethodConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodConfig.ProtoReflect.Descriptor instead.
func (*MethodConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{0}
}

func (x *MethodConfig) GetName() []*MethodConfig_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MethodConfig) GetWaitForReady() *wrapperspb.BoolValue {
	if x != nil {
		return x.WaitForReady
	}
	return nil
}

func (x *MethodConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *MethodConfig) GetMaxRequestMessageBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRequestMessageBytes
	}
	return nil
}

func (x *MethodConfig) GetMaxResponseMessageBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxResponseMessageBytes
	}
	return nil
}

func (x *MethodConfig) GetRetryOrHedgingPolicy() isMethodConfig_RetryOrHedgingPolicy {
	if x != nil {
		return x.RetryOrHedgingPolicy
	}
	return nil
}

func (x *MethodConfig) GetRetryPolicy() *MethodConfig_RetryPolicy {
	if x != nil {
		if x, ok := x.RetryOrHedgingPolicy.(*MethodConfig_RetryPolicy_); ok {
			return x.RetryPolicy
		}
	}
	return nil
}

func (x *MethodConfig) GetHedgingPolicy() *MethodConfig_HedgingPolicy {
	if x != nil {
		if x, ok := x.RetryOrHedgingPolicy.(*MethodConfig_HedgingPolicy_); ok {
			return x.HedgingPolicy
		}
	}
	return nil
}

type isMethodConfig_RetryOrHedgingPolicy interface {
	isMethodConfig_RetryOrHedgingPolicy()
}

type MethodConfig_RetryPolicy_ struct {
	RetryPolicy *MethodConfig_RetryPolicy `protobuf:"bytes,6,opt,name=retry_policy,json=retryPolicy,proto3,oneof"`
}

type MethodConfig_HedgingPolicy_ struct {
	HedgingPolicy *MethodConfig_HedgingPolicy `protobuf:"bytes,7,opt,name=hedging_policy,json=hedgingPolicy,proto3,oneof"`
}

func (*MethodConfig_RetryPolicy_) isMethodConfig_RetryOrHedgingPolicy() {}

func (*MethodConfig_HedgingPolicy_) isMethodConfig_RetryOrHedgingPolicy() {}

// Configuration for pick_first LB policy.
type PickFirstConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PickFirstConfig) Reset() {
	*x = PickFirstConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PickFirstConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickFirstConfig) ProtoMessage() {}

func (x *PickFirstConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickFirstConfig.ProtoReflect.Descriptor instead.
func (*PickFirstConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{1}
}

// Configuration for round_robin LB policy.
type RoundRobinConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundRobinConfig) Reset() {
	*x = RoundRobinConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundRobinConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundRobinConfig) ProtoMessage() {}

func (x *RoundRobinConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundRobinConfig.ProtoReflect.Descriptor instead.
func (*RoundRobinConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{2}
}

// Configuration for outlier_detection LB policy
type OutlierDetectionLoadBalancingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time interval between ejection analysis sweeps. This can result in
	// both new ejections as well as addresses being returned to service. Defaults
	// to 10000ms or 10s.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// The base time that as address is ejected for. The real time is equal to the
	// base time multiplied by the number of times the address has been ejected.
	// Defaults to 30000ms or 30s.
	BaseEjectionTime *durationpb.Duration `protobuf:"bytes,2,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// The maximum time that an address is ejected for. If not specified, the default value (300000ms or 300s) or
	// the base_ejection_time value is applied, whatever is larger.
	MaxEjectionTime *durationpb.Duration `protobuf:"bytes,3,opt,name=max_ejection_time,json=maxEjectionTime,proto3" json:"max_ejection_time,omitempty"`
	// The maximum % of an address list that can be ejected due to outlier
	// detection. Defaults to 10% but will eject at least one address regardless of the value.
	MaxEjectionPercent *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	// If set, success rate ejections will be performed
	SuccessRateEjection *OutlierDetectionLoadBalancingConfig_SuccessRateEjection `protobuf:"bytes,5,opt,name=success_rate_ejection,json=successRateEjection,proto3" json:"success_rate_ejection,omitempty"`
	// If set, failure rate ejections will be performed
	FailurePercentageEjection *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection `protobuf:"bytes,6,opt,name=failure_percentage_ejection,json=failurePercentageEjection,proto3" json:"failure_percentage_ejection,omitempty"`
	// The config for the child policy
	ChildPolicy   []*LoadBalancingConfig `protobuf:"bytes,13,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutlierDetectionLoadBalancingConfig) Reset() {
	*x = OutlierDetectionLoadBalancingConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutlierDetectionLoadBalancingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlierDetectionLoadBalancingConfig) ProtoMessage() {}

func (x *OutlierDetectionLoadBalancingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlierDetectionLoadBalancingConfig.ProtoReflect.Descriptor instead.
func (*OutlierDetectionLoadBalancingConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{3}
}

func (x *OutlierDetectionLoadBalancingConfig) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig) GetBaseEjectionTime() *durationpb.Duration {
	if x != nil {
		return x.BaseEjectionTime
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig) GetMaxEjectionTime() *durationpb.Duration {
	if x != nil {
		return x.MaxEjectionTime
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig) GetMaxEjectionPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig) GetSuccessRateEjection() *OutlierDetectionLoadBalancingConfig_SuccessRateEjection {
	if x != nil {
		return x.SuccessRateEjection
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig) GetFailurePercentageEjection() *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection {
	if x != nil {
		return x.FailurePercentageEjection
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

// Configuration for grpclb LB policy.
type GrpcLbConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional.  What LB policy to use for routing between the backend
	// addresses.  If unset, defaults to round_robin.
	// Currently, the only supported values are round_robin and pick_first.
	// Note that this will be used both in balancer mode and in fallback mode.
	// Multiple LB policies can be specified; clients will iterate through
	// the list in order and stop at the first policy that they support.
	ChildPolicy []*LoadBalancingConfig `protobuf:"bytes,1,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	// Optional.  If specified, overrides the name of the service to be sent to
	// the balancer.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Optional. The timeout in seconds for receiving the server list from the LB
	// server. Defaults to 10s.
	InitialFallbackTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=initial_fallback_timeout,json=initialFallbackTimeout,proto3" json:"initial_fallback_timeout,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GrpcLbConfig) Reset() {
	*x = GrpcLbConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcLbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcLbConfig) ProtoMessage() {}

func (x *GrpcLbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcLbConfig.ProtoReflect.Descriptor instead.
func (*GrpcLbConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcLbConfig) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

func (x *GrpcLbConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GrpcLbConfig) GetInitialFallbackTimeout() *durationpb.Duration {
	if x != nil {
		return x.InitialFallbackTimeout
	}
	return nil
}

// Configuration for priority LB policy.
type PriorityLoadBalancingPolicyConfig struct {
	state    protoimpl.MessageState                              `protogen:"open.v1"`
	Children map[string]*PriorityLoadBalancingPolicyConfig_Child `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A list of child names in decreasing priority order
	// (i.e., first element is the highest priority).
	Priorities    []string `protobuf:"bytes,2,rep,name=priorities,proto3" json:"priorities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriorityLoadBalancingPolicyConfig) Reset() {
	*x = PriorityLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriorityLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *PriorityLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*PriorityLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{5}
}

func (x *PriorityLoadBalancingPolicyConfig) GetChildren() map[string]*PriorityLoadBalancingPolicyConfig_Child {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PriorityLoadBalancingPolicyConfig) GetPriorities() []string {
	if x != nil {
		return x.Priorities
	}
	return nil
}

// Configuration for weighted_target LB policy.
type WeightedTargetLoadBalancingPolicyConfig struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Targets       map[string]*WeightedTargetLoadBalancingPolicyConfig_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeightedTargetLoadBalancingPolicyConfig) Reset() {
	*x = WeightedTargetLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeightedTargetLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedTargetLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *WeightedTargetLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedTargetLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*WeightedTargetLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{6}
}

func (x *WeightedTargetLoadBalancingPolicyConfig) GetTargets() map[string]*WeightedTargetLoadBalancingPolicyConfig_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

// Configuration for xds_cluster_manager_experimental LB policy.
type XdsClusterManagerLoadBalancingPolicyConfig struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	Children      map[string]*XdsClusterManagerLoadBalancingPolicyConfig_Child `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XdsClusterManagerLoadBalancingPolicyConfig) Reset() {
	*x = XdsClusterManagerLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsClusterManagerLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsClusterManagerLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *XdsClusterManagerLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsClusterManagerLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*XdsClusterManagerLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{7}
}

func (x *XdsClusterManagerLoadBalancingPolicyConfig) GetChildren() map[string]*XdsClusterManagerLoadBalancingPolicyConfig_Child {
	if x != nil {
		return x.Children
	}
	return nil
}

// Configuration for the cds LB policy.
type CdsConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cluster       string                 `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"` // Required.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CdsConfig) Reset() {
	*x = CdsConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CdsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdsConfig) ProtoMessage() {}

func (x *CdsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdsConfig.ProtoReflect.Descriptor instead.
func (*CdsConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{8}
}

func (x *CdsConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// Represents an xDS server.
type XdsServer struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ServerUri string                 `protobuf:"bytes,1,opt,name=server_uri,proto3" json:"server_uri,omitempty"` // Required.
	// A list of channel creds to use.  The first supported type will be used.
	ChannelCreds []*XdsServer_ChannelCredentials `protobuf:"bytes,2,rep,name=channel_creds,proto3" json:"channel_creds,omitempty"`
	// A repeated list of server features.
	ServerFeatures []*structpb.Value `protobuf:"bytes,3,rep,name=server_features,proto3" json:"server_features,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *XdsServer) Reset() {
	*x = XdsServer{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsServer) ProtoMessage() {}

func (x *XdsServer) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsServer.ProtoReflect.Descriptor instead.
func (*XdsServer) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{9}
}

func (x *XdsServer) GetServerUri() string {
	if x != nil {
		return x.ServerUri
	}
	return ""
}

func (x *XdsServer) GetChannelCreds() []*XdsServer_ChannelCredentials {
	if x != nil {
		return x.ChannelCreds
	}
	return nil
}

func (x *XdsServer) GetServerFeatures() []*structpb.Value {
	if x != nil {
		return x.ServerFeatures
	}
	return nil
}

// Configuration for xds_cluster_resolver LB policy.
type XdsClusterResolverLoadBalancingPolicyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ordered list of discovery mechanisms.
	// Must have at least one element.
	// Results from each discovery mechanism are concatenated together in
	// successive priorities.
	DiscoveryMechanisms []*XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism `protobuf:"bytes,1,rep,name=discovery_mechanisms,json=discoveryMechanisms,proto3" json:"discovery_mechanisms,omitempty"`
	// xDS LB policy. Will be used as the child config of the xds_cluster_impl LB policy.
	XdsLbPolicy   []*LoadBalancingConfig `protobuf:"bytes,2,rep,name=xds_lb_policy,json=xdsLbPolicy,proto3" json:"xds_lb_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig) Reset() {
	*x = XdsClusterResolverLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsClusterResolverLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *XdsClusterResolverLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsClusterResolverLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*XdsClusterResolverLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{10}
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig) GetDiscoveryMechanisms() []*XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism {
	if x != nil {
		return x.DiscoveryMechanisms
	}
	return nil
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig) GetXdsLbPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.XdsLbPolicy
	}
	return nil
}

// Configuration for xds_cluster_impl LB policy.
type XdsClusterImplLoadBalancingPolicyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster name.  Required.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// EDS service name.
	// Not set if cluster is not an EDS cluster or if it does not
	// specify an EDS service name.
	EdsServiceName string `protobuf:"bytes,2,opt,name=eds_service_name,json=edsServiceName,proto3" json:"eds_service_name,omitempty"`
	// Server to send load reports to.
	// If unset, no load reporting is done.
	// If set to empty string, load reporting will be sent to the same
	// server as we are getting xds data from.
	// DEPRECATED: Use new lrs_load_reporting_server field instead.
	//
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	LrsLoadReportingServerName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=lrs_load_reporting_server_name,json=lrsLoadReportingServerName,proto3" json:"lrs_load_reporting_server_name,omitempty"`
	// LRS server to send load reports to.
	// If not present, load reporting will be disabled.
	// Supercedes lrs_load_reporting_server_name field.
	LrsLoadReportingServer *XdsServer `protobuf:"bytes,7,opt,name=lrs_load_reporting_server,json=lrsLoadReportingServer,proto3" json:"lrs_load_reporting_server,omitempty"`
	// Maximum number of outstanding requests can be made to the upstream cluster.
	// Default is 1024.
	MaxConcurrentRequests *wrapperspb.UInt32Value                                 `protobuf:"bytes,4,opt,name=max_concurrent_requests,json=maxConcurrentRequests,proto3" json:"max_concurrent_requests,omitempty"`
	DropCategories        []*XdsClusterImplLoadBalancingPolicyConfig_DropCategory `protobuf:"bytes,5,rep,name=drop_categories,json=dropCategories,proto3" json:"drop_categories,omitempty"`
	// Child policy.
	ChildPolicy   []*LoadBalancingConfig `protobuf:"bytes,6,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) Reset() {
	*x = XdsClusterImplLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsClusterImplLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *XdsClusterImplLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsClusterImplLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*XdsClusterImplLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{11}
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) GetEdsServiceName() string {
	if x != nil {
		return x.EdsServiceName
	}
	return ""
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *XdsClusterImplLoadBalancingPolicyConfig) GetLrsLoadReportingServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.LrsLoadReportingServerName
	}
	return nil
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) GetLrsLoadReportingServer() *XdsServer {
	if x != nil {
		return x.LrsLoadReportingServer
	}
	return nil
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) GetMaxConcurrentRequests() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return nil
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) GetDropCategories() []*XdsClusterImplLoadBalancingPolicyConfig_DropCategory {
	if x != nil {
		return x.DropCategories
	}
	return nil
}

func (x *XdsClusterImplLoadBalancingPolicyConfig) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

// Configuration for eds LB policy.
type EdsLoadBalancingPolicyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster name.  Required.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// EDS service name, as returned in CDS.
	// May be unset if not specified in CDS.
	EdsServiceName string `protobuf:"bytes,2,opt,name=eds_service_name,json=edsServiceName,proto3" json:"eds_service_name,omitempty"`
	// Server to send load reports to.
	// If unset, no load reporting is done.
	// If set to empty string, load reporting will be sent to the same
	// server as we are getting xds data from.
	LrsLoadReportingServerName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=lrs_load_reporting_server_name,json=lrsLoadReportingServerName,proto3" json:"lrs_load_reporting_server_name,omitempty"`
	// Locality-picking policy.
	// This policy's config is expected to be in the format used
	// by the weighted_target policy.  Note that the config should include
	// an empty value for the "targets" field; that empty value will be
	// replaced by one that is dynamically generated based on the EDS data.
	// Optional; defaults to "weighted_target".
	LocalityPickingPolicy []*LoadBalancingConfig `protobuf:"bytes,4,rep,name=locality_picking_policy,json=localityPickingPolicy,proto3" json:"locality_picking_policy,omitempty"`
	// Endpoint-picking policy.
	// This will be configured as the policy for each child in the
	// locality-policy's config.
	// Optional; defaults to "round_robin".
	EndpointPickingPolicy []*LoadBalancingConfig `protobuf:"bytes,5,rep,name=endpoint_picking_policy,json=endpointPickingPolicy,proto3" json:"endpoint_picking_policy,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EdsLoadBalancingPolicyConfig) Reset() {
	*x = EdsLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EdsLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdsLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *EdsLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdsLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*EdsLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{12}
}

func (x *EdsLoadBalancingPolicyConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *EdsLoadBalancingPolicyConfig) GetEdsServiceName() string {
	if x != nil {
		return x.EdsServiceName
	}
	return ""
}

func (x *EdsLoadBalancingPolicyConfig) GetLrsLoadReportingServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.LrsLoadReportingServerName
	}
	return nil
}

func (x *EdsLoadBalancingPolicyConfig) GetLocalityPickingPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.LocalityPickingPolicy
	}
	return nil
}

func (x *EdsLoadBalancingPolicyConfig) GetEndpointPickingPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.EndpointPickingPolicy
	}
	return nil
}

// Configuration for ring_hash LB policy.
type RingHashLoadBalancingConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinRingSize   uint64                 `protobuf:"varint,1,opt,name=min_ring_size,json=minRingSize,proto3" json:"min_ring_size,omitempty"`
	MaxRingSize   uint64                 `protobuf:"varint,2,opt,name=max_ring_size,json=maxRingSize,proto3" json:"max_ring_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RingHashLoadBalancingConfig) Reset() {
	*x = RingHashLoadBalancingConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RingHashLoadBalancingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingHashLoadBalancingConfig) ProtoMessage() {}

func (x *RingHashLoadBalancingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingHashLoadBalancingConfig.ProtoReflect.Descriptor instead.
func (*RingHashLoadBalancingConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{13}
}

func (x *RingHashLoadBalancingConfig) GetMinRingSize() uint64 {
	if x != nil {
		return x.MinRingSize
	}
	return 0
}

func (x *RingHashLoadBalancingConfig) GetMaxRingSize() uint64 {
	if x != nil {
		return x.MaxRingSize
	}
	return 0
}

// Configuration for lrs LB policy.
type LrsLoadBalancingPolicyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster name.  Required.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// EDS service name, as returned in CDS.
	// May be unset if not specified in CDS.
	EdsServiceName string `protobuf:"bytes,2,opt,name=eds_service_name,json=edsServiceName,proto3" json:"eds_service_name,omitempty"`
	// Server to send load reports to.  Required.
	// If set to empty string, load reporting will be sent to the same
	// server as we are getting xds data from.
	LrsLoadReportingServerName string                                 `protobuf:"bytes,3,opt,name=lrs_load_reporting_server_name,json=lrsLoadReportingServerName,proto3" json:"lrs_load_reporting_server_name,omitempty"`
	Locality                   *LrsLoadBalancingPolicyConfig_Locality `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	// Endpoint-picking policy.
	ChildPolicy   []*LoadBalancingConfig `protobuf:"bytes,5,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LrsLoadBalancingPolicyConfig) Reset() {
	*x = LrsLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LrsLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LrsLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *LrsLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LrsLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*LrsLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{14}
}

func (x *LrsLoadBalancingPolicyConfig) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *LrsLoadBalancingPolicyConfig) GetEdsServiceName() string {
	if x != nil {
		return x.EdsServiceName
	}
	return ""
}

func (x *LrsLoadBalancingPolicyConfig) GetLrsLoadReportingServerName() string {
	if x != nil {
		return x.LrsLoadReportingServerName
	}
	return ""
}

func (x *LrsLoadBalancingPolicyConfig) GetLocality() *LrsLoadBalancingPolicyConfig_Locality {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *LrsLoadBalancingPolicyConfig) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

// Configuration for the xds_wrr_locality load balancing policy.
type XdsWrrLocalityLoadBalancingPolicyConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChildPolicy   []*LoadBalancingConfig `protobuf:"bytes,1,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XdsWrrLocalityLoadBalancingPolicyConfig) Reset() {
	*x = XdsWrrLocalityLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsWrrLocalityLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsWrrLocalityLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *XdsWrrLocalityLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsWrrLocalityLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*XdsWrrLocalityLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{15}
}

func (x *XdsWrrLocalityLoadBalancingPolicyConfig) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

// Configuration for the least_request LB policy.
type LeastRequestLocalityLoadBalancingPolicyConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChoiceCount   uint64                 `protobuf:"varint,1,opt,name=choice_count,json=choiceCount,proto3" json:"choice_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeastRequestLocalityLoadBalancingPolicyConfig) Reset() {
	*x = LeastRequestLocalityLoadBalancingPolicyConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeastRequestLocalityLoadBalancingPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeastRequestLocalityLoadBalancingPolicyConfig) ProtoMessage() {}

func (x *LeastRequestLocalityLoadBalancingPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeastRequestLocalityLoadBalancingPolicyConfig.ProtoReflect.Descriptor instead.
func (*LeastRequestLocalityLoadBalancingPolicyConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{16}
}

func (x *LeastRequestLocalityLoadBalancingPolicyConfig) GetChoiceCount() uint64 {
	if x != nil {
		return x.ChoiceCount
	}
	return 0
}

// Configuration for xds LB policy.
type XdsConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of balancer to connect to.
	//
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	BalancerName string `protobuf:"bytes,1,opt,name=balancer_name,json=balancerName,proto3" json:"balancer_name,omitempty"`
	// Optional.  What LB policy to use for intra-locality routing.
	// If unset, will use whatever algorithm is specified by the balancer.
	// Multiple LB policies can be specified; clients will iterate through
	// the list in order and stop at the first policy that they support.
	ChildPolicy []*LoadBalancingConfig `protobuf:"bytes,2,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	// Optional.  What LB policy to use in fallback mode.  If not
	// specified, defaults to round_robin.
	// Multiple LB policies can be specified; clients will iterate through
	// the list in order and stop at the first policy that they support.
	FallbackPolicy []*LoadBalancingConfig `protobuf:"bytes,3,rep,name=fallback_policy,json=fallbackPolicy,proto3" json:"fallback_policy,omitempty"`
	// Optional.  Name to use in EDS query.  If not present, defaults to
	// the server name from the target URI.
	EdsServiceName string `protobuf:"bytes,4,opt,name=eds_service_name,json=edsServiceName,proto3" json:"eds_service_name,omitempty"`
	// LRS server to send load reports to.
	// If not present, load reporting will be disabled.
	// If set to the empty string, load reporting will be sent to the same
	// server that we obtained CDS data from.
	LrsLoadReportingServerName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=lrs_load_reporting_server_name,json=lrsLoadReportingServerName,proto3" json:"lrs_load_reporting_server_name,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *XdsConfig) Reset() {
	*x = XdsConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsConfig) ProtoMessage() {}

func (x *XdsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsConfig.ProtoReflect.Descriptor instead.
func (*XdsConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *XdsConfig) GetBalancerName() string {
	if x != nil {
		return x.BalancerName
	}
	return ""
}

func (x *XdsConfig) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

func (x *XdsConfig) GetFallbackPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.FallbackPolicy
	}
	return nil
}

func (x *XdsConfig) GetEdsServiceName() string {
	if x != nil {
		return x.EdsServiceName
	}
	return ""
}

func (x *XdsConfig) GetLrsLoadReportingServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.LrsLoadReportingServerName
	}
	return nil
}

// Selects LB policy and provides corresponding configuration.
//
// In general, all instances of this field should be repeated. Clients will
// iterate through the list in order and stop at the first policy that they
// support.  This allows the service config to specify custom policies that may
// not be known to all clients.
//
//   - If the config for the first supported policy is invalid, the whole service
//     config is invalid.
//   - If the list doesn't contain any supported policy, the whole service config
//     is invalid.
type LoadBalancingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Exactly one LB policy may be configured.
	//
	// Types that are valid to be assigned to Policy:
	//
	//	*LoadBalancingConfig_PickFirst
	//	*LoadBalancingConfig_RoundRobin
	//	*LoadBalancingConfig_OutlierDetection
	//	*LoadBalancingConfig_Grpclb
	//	*LoadBalancingConfig_PriorityExperimental
	//	*LoadBalancingConfig_WeightedTargetExperimental
	//	*LoadBalancingConfig_XdsClusterManagerExperimental
	//	*LoadBalancingConfig_CdsExperimental
	//	*LoadBalancingConfig_XdsClusterResolverExperimental
	//	*LoadBalancingConfig_XdsClusterImplExperimental
	//	*LoadBalancingConfig_RingHashExperimental
	//	*LoadBalancingConfig_LrsExperimental
	//	*LoadBalancingConfig_EdsExperimental
	//	*LoadBalancingConfig_Xds
	//	*LoadBalancingConfig_XdsExperimental
	//	*LoadBalancingConfig_XdsWrrLocalityExperimental
	//	*LoadBalancingConfig_LeastRequestExperimental
	Policy        isLoadBalancingConfig_Policy `protobuf_oneof:"policy"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadBalancingConfig) Reset() {
	*x = LoadBalancingConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancingConfig) ProtoMessage() {}

func (x *LoadBalancingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancingConfig.ProtoReflect.Descriptor instead.
func (*LoadBalancingConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{18}
}

func (x *LoadBalancingConfig) GetPolicy() isLoadBalancingConfig_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *LoadBalancingConfig) GetPickFirst() *PickFirstConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_PickFirst); ok {
			return x.PickFirst
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetRoundRobin() *RoundRobinConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_RoundRobin); ok {
			return x.RoundRobin
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetOutlierDetection() *OutlierDetectionLoadBalancingConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_OutlierDetection); ok {
			return x.OutlierDetection
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetGrpclb() *GrpcLbConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_Grpclb); ok {
			return x.Grpclb
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetPriorityExperimental() *PriorityLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_PriorityExperimental); ok {
			return x.PriorityExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetWeightedTargetExperimental() *WeightedTargetLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_WeightedTargetExperimental); ok {
			return x.WeightedTargetExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetXdsClusterManagerExperimental() *XdsClusterManagerLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_XdsClusterManagerExperimental); ok {
			return x.XdsClusterManagerExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetCdsExperimental() *CdsConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_CdsExperimental); ok {
			return x.CdsExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetXdsClusterResolverExperimental() *XdsClusterResolverLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_XdsClusterResolverExperimental); ok {
			return x.XdsClusterResolverExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetXdsClusterImplExperimental() *XdsClusterImplLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_XdsClusterImplExperimental); ok {
			return x.XdsClusterImplExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetRingHashExperimental() *RingHashLoadBalancingConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_RingHashExperimental); ok {
			return x.RingHashExperimental
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *LoadBalancingConfig) GetLrsExperimental() *LrsLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_LrsExperimental); ok {
			return x.LrsExperimental
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *LoadBalancingConfig) GetEdsExperimental() *EdsLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_EdsExperimental); ok {
			return x.EdsExperimental
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *LoadBalancingConfig) GetXds() *XdsConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_Xds); ok {
			return x.Xds
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *LoadBalancingConfig) GetXdsExperimental() *XdsConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_XdsExperimental); ok {
			return x.XdsExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetXdsWrrLocalityExperimental() *XdsWrrLocalityLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_XdsWrrLocalityExperimental); ok {
			return x.XdsWrrLocalityExperimental
		}
	}
	return nil
}

func (x *LoadBalancingConfig) GetLeastRequestExperimental() *LeastRequestLocalityLoadBalancingPolicyConfig {
	if x != nil {
		if x, ok := x.Policy.(*LoadBalancingConfig_LeastRequestExperimental); ok {
			return x.LeastRequestExperimental
		}
	}
	return nil
}

type isLoadBalancingConfig_Policy interface {
	isLoadBalancingConfig_Policy()
}

type LoadBalancingConfig_PickFirst struct {
	PickFirst *PickFirstConfig `protobuf:"bytes,4,opt,name=pick_first,proto3,oneof"`
}

type LoadBalancingConfig_RoundRobin struct {
	RoundRobin *RoundRobinConfig `protobuf:"bytes,1,opt,name=round_robin,proto3,oneof"`
}

type LoadBalancingConfig_OutlierDetection struct {
	OutlierDetection *OutlierDetectionLoadBalancingConfig `protobuf:"bytes,15,opt,name=outlier_detection,proto3,oneof"`
}

type LoadBalancingConfig_Grpclb struct {
	// gRPC lookaside load balancing.
	// This will eventually be deprecated by the new xDS-based local
	// balancing policy.
	Grpclb *GrpcLbConfig `protobuf:"bytes,3,opt,name=grpclb,proto3,oneof"`
}

type LoadBalancingConfig_PriorityExperimental struct {
	PriorityExperimental *PriorityLoadBalancingPolicyConfig `protobuf:"bytes,9,opt,name=priority_experimental,proto3,oneof"`
}

type LoadBalancingConfig_WeightedTargetExperimental struct {
	WeightedTargetExperimental *WeightedTargetLoadBalancingPolicyConfig `protobuf:"bytes,10,opt,name=weighted_target_experimental,proto3,oneof"`
}

type LoadBalancingConfig_XdsClusterManagerExperimental struct {
	// xDS-based load balancing.
	XdsClusterManagerExperimental *XdsClusterManagerLoadBalancingPolicyConfig `protobuf:"bytes,14,opt,name=xds_cluster_manager_experimental,proto3,oneof"`
}

type LoadBalancingConfig_CdsExperimental struct {
	CdsExperimental *CdsConfig `protobuf:"bytes,6,opt,name=cds_experimental,proto3,oneof"`
}

type LoadBalancingConfig_XdsClusterResolverExperimental struct {
	XdsClusterResolverExperimental *XdsClusterResolverLoadBalancingPolicyConfig `protobuf:"bytes,11,opt,name=xds_cluster_resolver_experimental,proto3,oneof"`
}

type LoadBalancingConfig_XdsClusterImplExperimental struct {
	XdsClusterImplExperimental *XdsClusterImplLoadBalancingPolicyConfig `protobuf:"bytes,12,opt,name=xds_cluster_impl_experimental,proto3,oneof"`
}

type LoadBalancingConfig_RingHashExperimental struct {
	RingHashExperimental *RingHashLoadBalancingConfig `protobuf:"bytes,13,opt,name=ring_hash_experimental,proto3,oneof"`
}

type LoadBalancingConfig_LrsExperimental struct {
	// Deprecated xDS-related policies.
	//
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	LrsExperimental *LrsLoadBalancingPolicyConfig `protobuf:"bytes,8,opt,name=lrs_experimental,proto3,oneof"`
}

type LoadBalancingConfig_EdsExperimental struct {
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	EdsExperimental *EdsLoadBalancingPolicyConfig `protobuf:"bytes,7,opt,name=eds_experimental,proto3,oneof"`
}

type LoadBalancingConfig_Xds struct {
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	Xds *XdsConfig `protobuf:"bytes,2,opt,name=xds,proto3,oneof"`
}

type LoadBalancingConfig_XdsExperimental struct {
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	XdsExperimental *XdsConfig `protobuf:"bytes,5,opt,name=xds_experimental,proto3,oneof"`
}

type LoadBalancingConfig_XdsWrrLocalityExperimental struct {
	XdsWrrLocalityExperimental *XdsWrrLocalityLoadBalancingPolicyConfig `protobuf:"bytes,16,opt,name=xds_wrr_locality_experimental,proto3,oneof"`
}

type LoadBalancingConfig_LeastRequestExperimental struct {
	LeastRequestExperimental *LeastRequestLocalityLoadBalancingPolicyConfig `protobuf:"bytes,17,opt,name=least_request_experimental,proto3,oneof"`
}

func (*LoadBalancingConfig_PickFirst) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_RoundRobin) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_OutlierDetection) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_Grpclb) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_PriorityExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_WeightedTargetExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_XdsClusterManagerExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_CdsExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_XdsClusterResolverExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_XdsClusterImplExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_RingHashExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_LrsExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_EdsExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_Xds) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_XdsExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_XdsWrrLocalityExperimental) isLoadBalancingConfig_Policy() {}

func (*LoadBalancingConfig_LeastRequestExperimental) isLoadBalancingConfig_Policy() {}

// A ServiceConfig represents information about a service but is not specific to
// any name resolver.
type ServiceConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	LoadBalancingPolicy ServiceConfig_LoadBalancingPolicy `protobuf:"varint,1,opt,name=load_balancing_policy,json=loadBalancingPolicy,proto3,enum=einride.serviceconfig.v1.ServiceConfig_LoadBalancingPolicy" json:"load_balancing_policy,omitempty"`
	// Multiple LB policies can be specified; clients will iterate through
	// the list in order and stop at the first policy that they support. If none
	// are supported, the service config is considered invalid.
	LoadBalancingConfig []*LoadBalancingConfig `protobuf:"bytes,4,rep,name=load_balancing_config,json=loadBalancingConfig,proto3" json:"load_balancing_config,omitempty"`
	// Per-method configuration.
	MethodConfig      []*MethodConfig                      `protobuf:"bytes,2,rep,name=method_config,json=methodConfig,proto3" json:"method_config,omitempty"`
	RetryThrottling   *ServiceConfig_RetryThrottlingPolicy `protobuf:"bytes,3,opt,name=retry_throttling,json=retryThrottling,proto3" json:"retry_throttling,omitempty"`
	HealthCheckConfig *ServiceConfig_HealthCheckConfig     `protobuf:"bytes,5,opt,name=health_check_config,json=healthCheckConfig,proto3" json:"health_check_config,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{19}
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *ServiceConfig) GetLoadBalancingPolicy() ServiceConfig_LoadBalancingPolicy {
	if x != nil {
		return x.LoadBalancingPolicy
	}
	return ServiceConfig_UNSPECIFIED
}

func (x *ServiceConfig) GetLoadBalancingConfig() []*LoadBalancingConfig {
	if x != nil {
		return x.LoadBalancingConfig
	}
	return nil
}

func (x *ServiceConfig) GetMethodConfig() []*MethodConfig {
	if x != nil {
		return x.MethodConfig
	}
	return nil
}

func (x *ServiceConfig) GetRetryThrottling() *ServiceConfig_RetryThrottlingPolicy {
	if x != nil {
		return x.RetryThrottling
	}
	return nil
}

func (x *ServiceConfig) GetHealthCheckConfig() *ServiceConfig_HealthCheckConfig {
	if x != nil {
		return x.HealthCheckConfig
	}
	return nil
}

// The names of the methods to which this configuration applies.
//   - MethodConfig without names (empty list) will be skipped.
//   - Each name entry must be unique across the entire ServiceConfig.
//   - If the 'method' field is empty, this MethodConfig specifies the defaults
//     for all methods for the specified service.
//   - If the 'service' field is empty, the 'method' field must be empty, and
//     this MethodConfig specifies the default for all methods (it's the default
//     config).
//
// When determining which MethodConfig to use for a given RPC, the most
// specific match wins. For example, let's say that the service config
// contains the following MethodConfig entries:
//
// method_config { name { } ... }
// method_config { name { service: "MyService" } ... }
// method_config { name { service: "MyService" method: "Foo" } ... }
//
// MyService/Foo will use the third entry, because it exactly matches the
// service and method name. MyService/Bar will use the second entry, because
// it provides the default for all methods of MyService. AnotherService/Baz
// will use the first entry, because it doesn't match the other two.
//
// In JSON representation, value "", value `null`, and not present are the
// same. The following are the same Name:
// - { "service": "s" }
// - { "service": "s", "method": null }
// - { "service": "s", "method": "" }
type MethodConfig_Name struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"` // Required. Includes proto package name.
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MethodConfig_Name) Reset() {
	*x = MethodConfig_Name{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodConfig_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodConfig_Name) ProtoMessage() {}

func (x *MethodConfig_Name) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodConfig_Name.ProtoReflect.Descriptor instead.
func (*MethodConfig_Name) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MethodConfig_Name) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *MethodConfig_Name) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// The retry policy for outgoing RPCs.
type MethodConfig_RetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of RPC attempts, including the original attempt.
	//
	// This field is required and must be greater than 1.
	// Any value greater than 5 will be treated as if it were 5.
	MaxAttempts uint32 `protobuf:"varint,1,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// Exponential backoff parameters. The initial retry attempt will occur at
	// random(0, initial_backoff). In general, the nth attempt will occur at
	// random(0,
	//
	//	min(initial_backoff*backoff_multiplier**(n-1), max_backoff)).
	//
	// Required. Must be greater than zero.
	InitialBackoff *durationpb.Duration `protobuf:"bytes,2,opt,name=initial_backoff,json=initialBackoff,proto3" json:"initial_backoff,omitempty"`
	// Required. Must be greater than zero.
	MaxBackoff        *durationpb.Duration `protobuf:"bytes,3,opt,name=max_backoff,json=maxBackoff,proto3" json:"max_backoff,omitempty"`
	BackoffMultiplier float32              `protobuf:"fixed32,4,opt,name=backoff_multiplier,json=backoffMultiplier,proto3" json:"backoff_multiplier,omitempty"` // Required. Must be greater than zero.
	// The set of status codes which may be retried.
	//
	// This field is required and must be non-empty.
	RetryableStatusCodes []Code `protobuf:"varint,5,rep,packed,name=retryable_status_codes,json=retryableStatusCodes,proto3,enum=einride.serviceconfig.v1.Code" json:"retryable_status_codes,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MethodConfig_RetryPolicy) Reset() {
	*x = MethodConfig_RetryPolicy{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodConfig_RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodConfig_RetryPolicy) ProtoMessage() {}

func (x *MethodConfig_RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodConfig_RetryPolicy.ProtoReflect.Descriptor instead.
func (*MethodConfig_RetryPolicy) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MethodConfig_RetryPolicy) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *MethodConfig_RetryPolicy) GetInitialBackoff() *durationpb.Duration {
	if x != nil {
		return x.InitialBackoff
	}
	return nil
}

func (x *MethodConfig_RetryPolicy) GetMaxBackoff() *durationpb.Duration {
	if x != nil {
		return x.MaxBackoff
	}
	return nil
}

func (x *MethodConfig_RetryPolicy) GetBackoffMultiplier() float32 {
	if x != nil {
		return x.BackoffMultiplier
	}
	return 0
}

func (x *MethodConfig_RetryPolicy) GetRetryableStatusCodes() []Code {
	if x != nil {
		return x.RetryableStatusCodes
	}
	return nil
}

// The hedging policy for outgoing RPCs. Hedged RPCs may execute more than
// once on the server, so only idempotent methods should specify a hedging
// policy.
type MethodConfig_HedgingPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hedging policy will send up to max_requests RPCs.
	// This number represents the total number of all attempts, including
	// the original attempt.
	//
	// This field is required and must be greater than 1.
	// Any value greater than 5 will be treated as if it were 5.
	MaxAttempts uint32 `protobuf:"varint,1,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// The first RPC will be sent immediately, but the max_requests-1 subsequent
	// hedged RPCs will be sent at intervals of every hedging_delay. Set this
	// to 0 to immediately send all max_requests RPCs.
	HedgingDelay *durationpb.Duration `protobuf:"bytes,2,opt,name=hedging_delay,json=hedgingDelay,proto3" json:"hedging_delay,omitempty"`
	// The set of status codes which indicate other hedged RPCs may still
	// succeed. If a non-fatal status code is returned by the server, hedged
	// RPCs will continue. Otherwise, outstanding requests will be canceled and
	// the error returned to the client application layer.
	//
	// This field is optional.
	NonFatalStatusCodes []Code `protobuf:"varint,3,rep,packed,name=non_fatal_status_codes,json=nonFatalStatusCodes,proto3,enum=einride.serviceconfig.v1.Code" json:"non_fatal_status_codes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MethodConfig_HedgingPolicy) Reset() {
	*x = MethodConfig_HedgingPolicy{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodConfig_HedgingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodConfig_HedgingPolicy) ProtoMessage() {}

func (x *MethodConfig_HedgingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodConfig_HedgingPolicy.ProtoReflect.Descriptor instead.
func (*MethodConfig_HedgingPolicy) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MethodConfig_HedgingPolicy) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *MethodConfig_HedgingPolicy) GetHedgingDelay() *durationpb.Duration {
	if x != nil {
		return x.HedgingDelay
	}
	return nil
}

func (x *MethodConfig_HedgingPolicy) GetNonFatalStatusCodes() []Code {
	if x != nil {
		return x.NonFatalStatusCodes
	}
	return nil
}

// Parameters for the success rate ejection algorithm.
// This algorithm monitors the request success rate for all endpoints and
// ejects individual endpoints whose success rates are statistical outliers.
type OutlierDetectionLoadBalancingConfig_SuccessRateEjection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This factor is used to determine the ejection threshold for success rate
	// outlier ejection. The ejection threshold is the difference between the
	// mean success rate, and the product of this factor and the standard
	// deviation of the mean success rate: mean - (stdev *
	// success_rate_stdev_factor). This factor is divided by a thousand to get a
	// double. That is, if the desired factor is 1.9, the runtime value should
	// be 1900. Defaults to 1900.
	StdevFactor *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=stdev_factor,json=stdevFactor,proto3" json:"stdev_factor,omitempty"`
	// The % chance that an address will be actually ejected when an outlier status
	// is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcementPercentage *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=enforcement_percentage,json=enforcementPercentage,proto3" json:"enforcement_percentage,omitempty"`
	// The number of addresses that must have enough request volume to
	// detect success rate outliers. If the number of addresses is less than this
	// setting, outlier detection via success rate statistics is not performed
	// for any addresses. Defaults to 5.
	MinimumHosts *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=minimum_hosts,json=minimumHosts,proto3" json:"minimum_hosts,omitempty"`
	// The minimum number of total requests that must be collected in one
	// interval (as defined by the interval duration above) to include this address
	// in success rate based outlier detection. If the volume is lower than this
	// setting, outlier detection via success rate statistics is not performed
	// for that address. Defaults to 100.
	RequestVolume *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=request_volume,json=requestVolume,proto3" json:"request_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) Reset() {
	*x = OutlierDetectionLoadBalancingConfig_SuccessRateEjection{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlierDetectionLoadBalancingConfig_SuccessRateEjection) ProtoMessage() {}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlierDetectionLoadBalancingConfig_SuccessRateEjection.ProtoReflect.Descriptor instead.
func (*OutlierDetectionLoadBalancingConfig_SuccessRateEjection) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) GetStdevFactor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.StdevFactor
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) GetEnforcementPercentage() *wrapperspb.UInt32Value {
	if x != nil {
		return x.EnforcementPercentage
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) GetMinimumHosts() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinimumHosts
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig_SuccessRateEjection) GetRequestVolume() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolume
	}
	return nil
}

// Parameters for the failure percentage algorithm.
// This algorithm ejects individual endpoints whose failure rate is greater than
// some threshold, independently of any other endpoint.
type OutlierDetectionLoadBalancingConfig_FailurePercentageEjection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The failure percentage to use when determining failure percentage-based outlier detection. If
	// the failure percentage of a given address is greater than or equal to this value, it will be
	// ejected. Defaults to 85.
	Threshold *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// The % chance that an address will be actually ejected when an outlier status is detected through
	// failure percentage statistics. This setting can be used to disable ejection or to ramp it up
	// slowly. Defaults to 100.
	EnforcementPercentage *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=enforcement_percentage,json=enforcementPercentage,proto3" json:"enforcement_percentage,omitempty"`
	// The minimum number of addresses in order to perform failure percentage-based ejection.
	// If the total number of addresses is less than this value, failure percentage-based
	// ejection will not be performed. Defaults to 5.
	MinimumHosts *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=minimum_hosts,json=minimumHosts,proto3" json:"minimum_hosts,omitempty"`
	// The minimum number of total requests that must be collected in one interval (as defined by the
	// interval duration above) to perform failure percentage-based ejection for this address. If the
	// volume is lower than this setting, failure percentage-based ejection will not be performed for
	// this host. Defaults to 50.
	RequestVolume *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=request_volume,json=requestVolume,proto3" json:"request_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) Reset() {
	*x = OutlierDetectionLoadBalancingConfig_FailurePercentageEjection{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) ProtoMessage() {}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlierDetectionLoadBalancingConfig_FailurePercentageEjection.ProtoReflect.Descriptor instead.
func (*OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{3, 1}
}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) GetThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) GetEnforcementPercentage() *wrapperspb.UInt32Value {
	if x != nil {
		return x.EnforcementPercentage
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) GetMinimumHosts() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinimumHosts
	}
	return nil
}

func (x *OutlierDetectionLoadBalancingConfig_FailurePercentageEjection) GetRequestVolume() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolume
	}
	return nil
}

// A map of name to child policy configuration.
// The names are used to allow the priority policy to update
// existing child policies instead of creating new ones every
// time it receives a config update.
type PriorityLoadBalancingPolicyConfig_Child struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Config []*LoadBalancingConfig `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
	// If true, will ignore reresolution requests from this child.
	IgnoreReresolutionRequests bool `protobuf:"varint,2,opt,name=ignore_reresolution_requests,json=ignoreReresolutionRequests,proto3" json:"ignore_reresolution_requests,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *PriorityLoadBalancingPolicyConfig_Child) Reset() {
	*x = PriorityLoadBalancingPolicyConfig_Child{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriorityLoadBalancingPolicyConfig_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLoadBalancingPolicyConfig_Child) ProtoMessage() {}

func (x *PriorityLoadBalancingPolicyConfig_Child) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLoadBalancingPolicyConfig_Child.ProtoReflect.Descriptor instead.
func (*PriorityLoadBalancingPolicyConfig_Child) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PriorityLoadBalancingPolicyConfig_Child) GetConfig() []*LoadBalancingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PriorityLoadBalancingPolicyConfig_Child) GetIgnoreReresolutionRequests() bool {
	if x != nil {
		return x.IgnoreReresolutionRequests
	}
	return false
}

type WeightedTargetLoadBalancingPolicyConfig_Target struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weight        uint32                 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	ChildPolicy   []*LoadBalancingConfig `protobuf:"bytes,2,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeightedTargetLoadBalancingPolicyConfig_Target) Reset() {
	*x = WeightedTargetLoadBalancingPolicyConfig_Target{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeightedTargetLoadBalancingPolicyConfig_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedTargetLoadBalancingPolicyConfig_Target) ProtoMessage() {}

func (x *WeightedTargetLoadBalancingPolicyConfig_Target) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedTargetLoadBalancingPolicyConfig_Target.ProtoReflect.Descriptor instead.
func (*WeightedTargetLoadBalancingPolicyConfig_Target) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{6, 0}
}

func (x *WeightedTargetLoadBalancingPolicyConfig_Target) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedTargetLoadBalancingPolicyConfig_Target) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

type XdsClusterManagerLoadBalancingPolicyConfig_Child struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChildPolicy   []*LoadBalancingConfig `protobuf:"bytes,1,rep,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XdsClusterManagerLoadBalancingPolicyConfig_Child) Reset() {
	*x = XdsClusterManagerLoadBalancingPolicyConfig_Child{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsClusterManagerLoadBalancingPolicyConfig_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsClusterManagerLoadBalancingPolicyConfig_Child) ProtoMessage() {}

func (x *XdsClusterManagerLoadBalancingPolicyConfig_Child) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsClusterManagerLoadBalancingPolicyConfig_Child.ProtoReflect.Descriptor instead.
func (*XdsClusterManagerLoadBalancingPolicyConfig_Child) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{7, 0}
}

func (x *XdsClusterManagerLoadBalancingPolicyConfig_Child) GetChildPolicy() []*LoadBalancingConfig {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

type XdsServer_ChannelCredentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`     // Required.
	Config        *structpb.Struct       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // Optional JSON config.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XdsServer_ChannelCredentials) Reset() {
	*x = XdsServer_ChannelCredentials{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsServer_ChannelCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsServer_ChannelCredentials) ProtoMessage() {}

func (x *XdsServer_ChannelCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsServer_ChannelCredentials.ProtoReflect.Descriptor instead.
func (*XdsServer_ChannelCredentials) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{9, 0}
}

func (x *XdsServer_ChannelCredentials) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *XdsServer_ChannelCredentials) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

// Describes a discovery mechanism instance.
// For EDS or LOGICAL_DNS clusters, there will be exactly one
// DiscoveryMechanism, which will describe the cluster of the parent
// CDS policy.
// For aggregate clusters, there will be one DiscoveryMechanism for each
// underlying cluster.
type XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster name.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// LRS server to send load reports to.
	// If not present, load reporting will be disabled.
	// If set to the empty string, load reporting will be sent to the same
	// server that we obtained CDS data from.
	// DEPRECATED: Use new lrs_load_reporting_server field instead.
	//
	// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
	LrsLoadReportingServerName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=lrs_load_reporting_server_name,json=lrsLoadReportingServerName,proto3" json:"lrs_load_reporting_server_name,omitempty"`
	// LRS server to send load reports to.
	// If not present, load reporting will be disabled.
	// Supercedes lrs_load_reporting_server_name field.
	LrsLoadReportingServer *XdsServer `protobuf:"bytes,7,opt,name=lrs_load_reporting_server,json=lrsLoadReportingServer,proto3" json:"lrs_load_reporting_server,omitempty"`
	// Maximum number of outstanding requests can be made to the upstream
	// cluster.  Default is 1024.
	MaxConcurrentRequests *wrapperspb.UInt32Value                                             `protobuf:"bytes,3,opt,name=max_concurrent_requests,json=maxConcurrentRequests,proto3" json:"max_concurrent_requests,omitempty"`
	Type                  XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type `protobuf:"varint,4,opt,name=type,proto3,enum=einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type" json:"type,omitempty"`
	// For type EDS only.
	// EDS service name, as returned in CDS.
	// May be unset if not specified in CDS.
	EdsServiceName string `protobuf:"bytes,5,opt,name=eds_service_name,json=edsServiceName,proto3" json:"eds_service_name,omitempty"`
	// For type LOGICAL_DNS only.
	// DNS name to resolve in "host:port" form.
	DnsHostname string `protobuf:"bytes,6,opt,name=dns_hostname,json=dnsHostname,proto3" json:"dns_hostname,omitempty"`
	// The configuration for outlier_detection child policies
	// Within this message, the child_policy field will be ignored
	OutlierDetection *OutlierDetectionLoadBalancingConfig `protobuf:"bytes,8,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) Reset() {
	*x = XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) ProtoMessage() {}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism.ProtoReflect.Descriptor instead.
func (*XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{10, 0}
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// Deprecated: Marked as deprecated in einride/serviceconfig/v1/service_config.proto.
func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetLrsLoadReportingServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.LrsLoadReportingServerName
	}
	return nil
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetLrsLoadReportingServer() *XdsServer {
	if x != nil {
		return x.LrsLoadReportingServer
	}
	return nil
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetMaxConcurrentRequests() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return nil
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetType() XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type {
	if x != nil {
		return x.Type
	}
	return XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_UNKNOWN
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetEdsServiceName() string {
	if x != nil {
		return x.EdsServiceName
	}
	return ""
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetDnsHostname() string {
	if x != nil {
		return x.DnsHostname
	}
	return ""
}

func (x *XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism) GetOutlierDetection() *OutlierDetectionLoadBalancingConfig {
	if x != nil {
		return x.OutlierDetection
	}
	return nil
}

// Drop configuration.
type XdsClusterImplLoadBalancingPolicyConfig_DropCategory struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Category           string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	RequestsPerMillion uint32                 `protobuf:"varint,2,opt,name=requests_per_million,json=requestsPerMillion,proto3" json:"requests_per_million,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *XdsClusterImplLoadBalancingPolicyConfig_DropCategory) Reset() {
	*x = XdsClusterImplLoadBalancingPolicyConfig_DropCategory{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XdsClusterImplLoadBalancingPolicyConfig_DropCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdsClusterImplLoadBalancingPolicyConfig_DropCategory) ProtoMessage() {}

func (x *XdsClusterImplLoadBalancingPolicyConfig_DropCategory) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdsClusterImplLoadBalancingPolicyConfig_DropCategory.ProtoReflect.Descriptor instead.
func (*XdsClusterImplLoadBalancingPolicyConfig_DropCategory) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{11, 0}
}

func (x *XdsClusterImplLoadBalancingPolicyConfig_DropCategory) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *XdsClusterImplLoadBalancingPolicyConfig_DropCategory) GetRequestsPerMillion() uint32 {
	if x != nil {
		return x.RequestsPerMillion
	}
	return 0
}

// The locality for which this policy will report load.  Required.
type LrsLoadBalancingPolicyConfig_Locality struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Region        string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Zone          string                 `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	Subzone       string                 `protobuf:"bytes,3,opt,name=subzone,proto3" json:"subzone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LrsLoadBalancingPolicyConfig_Locality) Reset() {
	*x = LrsLoadBalancingPolicyConfig_Locality{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LrsLoadBalancingPolicyConfig_Locality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LrsLoadBalancingPolicyConfig_Locality) ProtoMessage() {}

func (x *LrsLoadBalancingPolicyConfig_Locality) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LrsLoadBalancingPolicyConfig_Locality.ProtoReflect.Descriptor instead.
func (*LrsLoadBalancingPolicyConfig_Locality) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{14, 0}
}

func (x *LrsLoadBalancingPolicyConfig_Locality) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *LrsLoadBalancingPolicyConfig_Locality) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *LrsLoadBalancingPolicyConfig_Locality) GetSubzone() string {
	if x != nil {
		return x.Subzone
	}
	return ""
}

// If a RetryThrottlingPolicy is provided, gRPC will automatically throttle
// retry attempts and hedged RPCs when the client's ratio of failures to
// successes exceeds a threshold.
//
// For each server name, the gRPC client will maintain a token_count which is
// initially set to max_tokens. Every outgoing RPC (regardless of service or
// method invoked) will change token_count as follows:
//
//   - Every failed RPC will decrement the token_count by 1.
//   - Every successful RPC will increment the token_count by token_ratio.
//
// If token_count is less than or equal to max_tokens / 2, then RPCs will not
// be retried and hedged RPCs will not be sent.
type ServiceConfig_RetryThrottlingPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of tokens starts at max_tokens. The token_count will always be
	// between 0 and max_tokens.
	//
	// This field is required and must be greater than zero.
	MaxTokens uint32 `protobuf:"varint,1,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	// The amount of tokens to add on each successful RPC. Typically this will
	// be some number between 0 and 1, e.g., 0.1.
	//
	// This field is required and must be greater than zero. Up to 3 decimal
	// places are supported.
	TokenRatio    float32 `protobuf:"fixed32,2,opt,name=token_ratio,json=tokenRatio,proto3" json:"token_ratio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceConfig_RetryThrottlingPolicy) Reset() {
	*x = ServiceConfig_RetryThrottlingPolicy{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_RetryThrottlingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_RetryThrottlingPolicy) ProtoMessage() {}

func (x *ServiceConfig_RetryThrottlingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_RetryThrottlingPolicy.ProtoReflect.Descriptor instead.
func (*ServiceConfig_RetryThrottlingPolicy) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ServiceConfig_RetryThrottlingPolicy) GetMaxTokens() uint32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *ServiceConfig_RetryThrottlingPolicy) GetTokenRatio() float32 {
	if x != nil {
		return x.TokenRatio
	}
	return 0
}

type ServiceConfig_HealthCheckConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service name to use in the health-checking request.
	ServiceName   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceConfig_HealthCheckConfig) Reset() {
	*x = ServiceConfig_HealthCheckConfig{}
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_HealthCheckConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_HealthCheckConfig) ProtoMessage() {}

func (x *ServiceConfig_HealthCheckConfig) ProtoReflect() protoreflect.Message {
	mi := &file_einride_serviceconfig_v1_service_config_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_HealthCheckConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig_HealthCheckConfig) Descriptor() ([]byte, []int) {
	return file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP(), []int{19, 1}
}

func (x *ServiceConfig_HealthCheckConfig) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

var File_einride_serviceconfig_v1_service_config_proto protoreflect.FileDescriptor

const file_einride_serviceconfig_v1_service_config_proto_rawDesc = "" +
	"\n" +
	"-einride/serviceconfig/v1/service_config.proto\x12\x18einride.serviceconfig.v1\x1a#einride/serviceconfig/v1/code.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\x89\t\n" +
	"\fMethodConfig\x12?\n" +
	"\x04name\x18\x01 \x03(\v2+.einride.serviceconfig.v1.MethodConfig.NameR\x04name\x12@\n" +
	"\x0ewait_for_ready\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\fwaitForReady\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12W\n" +
	"\x19max_request_message_bytes\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x16maxRequestMessageBytes\x12Y\n" +
	"\x1amax_response_message_bytes\x18\x05 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x17maxResponseMessageBytes\x12W\n" +
	"\fretry_policy\x18\x06 \x01(\v22.einride.serviceconfig.v1.MethodConfig.RetryPolicyH\x00R\vretryPolicy\x12]\n" +
	"\x0ehedging_policy\x18\a \x01(\v24.einride.serviceconfig.v1.MethodConfig.HedgingPolicyH\x00R\rhedgingPolicy\x1a8\n" +
	"\x04Name\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x1a\xb5\x02\n" +
	"\vRetryPolicy\x12!\n" +
	"\fmax_attempts\x18\x01 \x01(\rR\vmaxAttempts\x12B\n" +
	"\x0finitial_backoff\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x0einitialBackoff\x12:\n" +
	"\vmax_backoff\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"maxBackoff\x12-\n" +
	"\x12backoff_multiplier\x18\x04 \x01(\x02R\x11backoffMultiplier\x12T\n" +
	"\x16retryable_status_codes\x18\x05 \x03(\x0e2\x1e.einride.serviceconfig.v1.CodeR\x14retryableStatusCodes\x1a\xc7\x01\n" +
	"\rHedgingPolicy\x12!\n" +
	"\fmax_attempts\x18\x01 \x01(\rR\vmaxAttempts\x12>\n" +
	"\rhedging_delay\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\fhedgingDelay\x12S\n" +
	"\x16non_fatal_status_codes\x18\x03 \x03(\x0e2\x1e.einride.serviceconfig.v1.CodeR\x13nonFatalStatusCodesB\x19\n" +
	"\x17retry_or_hedging_policy\"\x11\n" +
	"\x0fPickFirstConfig\"\x12\n" +
	"\x10RoundRobinConfig\"\x9d\n" +
	"\n" +
	"#OutlierDetectionLoadBalancingConfig\x125\n" +
	"\binterval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\binterval\x12G\n" +
	"\x12base_ejection_time\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x10baseEjectionTime\x12E\n" +
	"\x11max_ejection_time\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x0fmaxEjectionTime\x12N\n" +
	"\x14max_ejection_percent\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x12maxEjectionPercent\x12\x85\x01\n" +
	"\x15success_rate_ejection\x18\x05 \x01(\v2Q.einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjectionR\x13successRateEjection\x12\x97\x01\n" +
	"\x1bfailure_percentage_ejection\x18\x06 \x01(\v2W.einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjectionR\x19failurePercentageEjection\x12P\n" +
	"\fchild_policy\x18\r \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x1a\xb3\x02\n" +
	"\x13SuccessRateEjection\x12?\n" +
	"\fstdev_factor\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\vstdevFactor\x12S\n" +
	"\x16enforcement_percentage\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x15enforcementPercentage\x12A\n" +
	"\rminimum_hosts\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\fminimumHosts\x12C\n" +
	"\x0erequest_volume\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\rrequestVolume\x1a\xb4\x02\n" +
	"\x19FailurePercentageEjection\x12:\n" +
	"\tthreshold\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\tthreshold\x12S\n" +
	"\x16enforcement_percentage\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x15enforcementPercentage\x12A\n" +
	"\rminimum_hosts\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\fminimumHosts\x12C\n" +
	"\x0erequest_volume\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\rrequestVolume\"\xd8\x01\n" +
	"\fGrpcLbConfig\x12P\n" +
	"\fchild_policy\x18\x01 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12S\n" +
	"\x18initial_fallback_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x16initialFallbackTimeout\"\xbd\x03\n" +
	"!PriorityLoadBalancingPolicyConfig\x12e\n" +
	"\bchildren\x18\x01 \x03(\v2I.einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.ChildrenEntryR\bchildren\x12\x1e\n" +
	"\n" +
	"priorities\x18\x02 \x03(\tR\n" +
	"priorities\x1a\x90\x01\n" +
	"\x05Child\x12E\n" +
	"\x06config\x18\x01 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\x06config\x12@\n" +
	"\x1cignore_reresolution_requests\x18\x02 \x01(\bR\x1aignoreReresolutionRequests\x1a~\n" +
	"\rChildrenEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12W\n" +
	"\x05value\x18\x02 \x01(\v2A.einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.ChildR\x05value:\x028\x01\"\x8e\x03\n" +
	"'WeightedTargetLoadBalancingPolicyConfig\x12h\n" +
	"\atargets\x18\x01 \x03(\v2N.einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.TargetsEntryR\atargets\x1ar\n" +
	"\x06Target\x12\x16\n" +
	"\x06weight\x18\x01 \x01(\rR\x06weight\x12P\n" +
	"\fchild_policy\x18\x02 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x1a\x84\x01\n" +
	"\fTargetsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12^\n" +
	"\x05value\x18\x02 \x01(\v2H.einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.TargetR\x05value:\x028\x01\"\x81\x03\n" +
	"*XdsClusterManagerLoadBalancingPolicyConfig\x12n\n" +
	"\bchildren\x18\x01 \x03(\v2R.einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.ChildrenEntryR\bchildren\x1aY\n" +
	"\x05Child\x12P\n" +
	"\fchild_policy\x18\x01 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x1a\x87\x01\n" +
	"\rChildrenEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12`\n" +
	"\x05value\x18\x02 \x01(\v2J.einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.ChildR\x05value:\x028\x01\"%\n" +
	"\tCdsConfig\x12\x18\n" +
	"\acluster\x18\x01 \x01(\tR\acluster\"\xa6\x02\n" +
	"\tXdsServer\x12\x1e\n" +
	"\n" +
	"server_uri\x18\x01 \x01(\tR\n" +
	"server_uri\x12\\\n" +
	"\rchannel_creds\x18\x02 \x03(\v26.einride.serviceconfig.v1.XdsServer.ChannelCredentialsR\rchannel_creds\x12@\n" +
	"\x0fserver_features\x18\x03 \x03(\v2\x16.google.protobuf.ValueR\x0fserver_features\x1aY\n" +
	"\x12ChannelCredentials\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12/\n" +
	"\x06config\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x06config\"\xb6\a\n" +
	"+XdsClusterResolverLoadBalancingPolicyConfig\x12\x8b\x01\n" +
	"\x14discovery_mechanisms\x18\x01 \x03(\v2X.einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanismR\x13discoveryMechanisms\x12Q\n" +
	"\rxds_lb_policy\x18\x02 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vxdsLbPolicy\x1a\xa5\x05\n" +
	"\x12DiscoveryMechanism\x12\x18\n" +
	"\acluster\x18\x01 \x01(\tR\acluster\x12d\n" +
	"\x1elrs_load_reporting_server_name\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueB\x02\x18\x01R\x1alrsLoadReportingServerName\x12^\n" +
	"\x19lrs_load_reporting_server\x18\a \x01(\v2#.einride.serviceconfig.v1.XdsServerR\x16lrsLoadReportingServer\x12T\n" +
	"\x17max_concurrent_requests\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x15maxConcurrentRequests\x12q\n" +
	"\x04type\x18\x04 \x01(\x0e2].einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.TypeR\x04type\x12(\n" +
	"\x10eds_service_name\x18\x05 \x01(\tR\x0eedsServiceName\x12!\n" +
	"\fdns_hostname\x18\x06 \x01(\tR\vdnsHostname\x12j\n" +
	"\x11outlier_detection\x18\b \x01(\v2=.einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfigR\x10outlierDetection\"-\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03EDS\x10\x01\x12\x0f\n" +
	"\vLOGICAL_DNS\x10\x02\"\xb2\x05\n" +
	"'XdsClusterImplLoadBalancingPolicyConfig\x12\x18\n" +
	"\acluster\x18\x01 \x01(\tR\acluster\x12(\n" +
	"\x10eds_service_name\x18\x02 \x01(\tR\x0eedsServiceName\x12d\n" +
	"\x1elrs_load_reporting_server_name\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueB\x02\x18\x01R\x1alrsLoadReportingServerName\x12^\n" +
	"\x19lrs_load_reporting_server\x18\a \x01(\v2#.einride.serviceconfig.v1.XdsServerR\x16lrsLoadReportingServer\x12T\n" +
	"\x17max_concurrent_requests\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x15maxConcurrentRequests\x12w\n" +
	"\x0fdrop_categories\x18\x05 \x03(\v2N.einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.DropCategoryR\x0edropCategories\x12P\n" +
	"\fchild_policy\x18\x06 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x1a\\\n" +
	"\fDropCategory\x12\x1a\n" +
	"\bcategory\x18\x01 \x01(\tR\bcategory\x120\n" +
	"\x14requests_per_million\x18\x02 \x01(\rR\x12requestsPerMillion\"\x92\x03\n" +
	"\x1cEdsLoadBalancingPolicyConfig\x12\x18\n" +
	"\acluster\x18\x01 \x01(\tR\acluster\x12(\n" +
	"\x10eds_service_name\x18\x02 \x01(\tR\x0eedsServiceName\x12`\n" +
	"\x1elrs_load_reporting_server_name\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueR\x1alrsLoadReportingServerName\x12e\n" +
	"\x17locality_picking_policy\x18\x04 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\x15localityPickingPolicy\x12e\n" +
	"\x17endpoint_picking_policy\x18\x05 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\x15endpointPickingPolicy\"e\n" +
	"\x1bRingHashLoadBalancingConfig\x12\"\n" +
	"\rmin_ring_size\x18\x01 \x01(\x04R\vminRingSize\x12\"\n" +
	"\rmax_ring_size\x18\x02 \x01(\x04R\vmaxRingSize\"\xb0\x03\n" +
	"\x1cLrsLoadBalancingPolicyConfig\x12!\n" +
	"\fcluster_name\x18\x01 \x01(\tR\vclusterName\x12(\n" +
	"\x10eds_service_name\x18\x02 \x01(\tR\x0eedsServiceName\x12B\n" +
	"\x1elrs_load_reporting_server_name\x18\x03 \x01(\tR\x1alrsLoadReportingServerName\x12[\n" +
	"\blocality\x18\x04 \x01(\v2?.einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig.LocalityR\blocality\x12P\n" +
	"\fchild_policy\x18\x05 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x1aP\n" +
	"\bLocality\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12\x12\n" +
	"\x04zone\x18\x02 \x01(\tR\x04zone\x12\x18\n" +
	"\asubzone\x18\x03 \x01(\tR\asubzone\"{\n" +
	"'XdsWrrLocalityLoadBalancingPolicyConfig\x12P\n" +
	"\fchild_policy\x18\x01 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\"R\n" +
	"-LeastRequestLocalityLoadBalancingPolicyConfig\x12!\n" +
	"\fchoice_count\x18\x01 \x01(\x04R\vchoiceCount\"\xea\x02\n" +
	"\tXdsConfig\x12'\n" +
	"\rbalancer_name\x18\x01 \x01(\tB\x02\x18\x01R\fbalancerName\x12P\n" +
	"\fchild_policy\x18\x02 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\vchildPolicy\x12V\n" +
	"\x0ffallback_policy\x18\x03 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\x0efallbackPolicy\x12(\n" +
	"\x10eds_service_name\x18\x04 \x01(\tR\x0eedsServiceName\x12`\n" +
	"\x1elrs_load_reporting_server_name\x18\x05 \x01(\v2\x1c.google.protobuf.StringValueR\x1alrsLoadReportingServerName\"\xe9\x0e\n" +
	"\x13LoadBalancingConfig\x12K\n" +
	"\n" +
	"pick_first\x18\x04 \x01(\v2).einride.serviceconfig.v1.PickFirstConfigH\x00R\n" +
	"pick_first\x12N\n" +
	"\vround_robin\x18\x01 \x01(\v2*.einride.serviceconfig.v1.RoundRobinConfigH\x00R\vround_robin\x12m\n" +
	"\x11outlier_detection\x18\x0f \x01(\v2=.einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfigH\x00R\x11outlier_detection\x12@\n" +
	"\x06grpclb\x18\x03 \x01(\v2&.einride.serviceconfig.v1.GrpcLbConfigH\x00R\x06grpclb\x12s\n" +
	"\x15priority_experimental\x18\t \x01(\v2;.einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfigH\x00R\x15priority_experimental\x12\x87\x01\n" +
	"\x1cweighted_target_experimental\x18\n" +
	" \x01(\v2A.einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfigH\x00R\x1cweighted_target_experimental\x12\x92\x01\n" +
	" xds_cluster_manager_experimental\x18\x0e \x01(\v2D.einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfigH\x00R xds_cluster_manager_experimental\x12Q\n" +
	"\x10cds_experimental\x18\x06 \x01(\v2#.einride.serviceconfig.v1.CdsConfigH\x00R\x10cds_experimental\x12\x95\x01\n" +
	"!xds_cluster_resolver_experimental\x18\v \x01(\v2E.einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfigH\x00R!xds_cluster_resolver_experimental\x12\x89\x01\n" +
	"\x1dxds_cluster_impl_experimental\x18\f \x01(\v2A.einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfigH\x00R\x1dxds_cluster_impl_experimental\x12o\n" +
	"\x16ring_hash_experimental\x18\r \x01(\v25.einride.serviceconfig.v1.RingHashLoadBalancingConfigH\x00R\x16ring_hash_experimental\x12h\n" +
	"\x10lrs_experimental\x18\b \x01(\v26.einride.serviceconfig.v1.LrsLoadBalancingPolicyConfigB\x02\x18\x01H\x00R\x10lrs_experimental\x12h\n" +
	"\x10eds_experimental\x18\a \x01(\v26.einride.serviceconfig.v1.EdsLoadBalancingPolicyConfigB\x02\x18\x01H\x00R\x10eds_experimental\x12;\n" +
	"\x03xds\x18\x02 \x01(\v2#.einride.serviceconfig.v1.XdsConfigB\x02\x18\x01H\x00R\x03xds\x12U\n" +
	"\x10xds_experimental\x18\x05 \x01(\v2#.einride.serviceconfig.v1.XdsConfigB\x02\x18\x01H\x00R\x10xds_experimental\x12\x89\x01\n" +
	"\x1dxds_wrr_locality_experimental\x18\x10 \x01(\v2A.einride.serviceconfig.v1.XdsWrrLocalityLoadBalancingPolicyConfigH\x00R\x1dxds_wrr_locality_experimental\x12\x89\x01\n" +
	"\x1aleast_request_experimental\x18\x11 \x01(\v2G.einride.serviceconfig.v1.LeastRequestLocalityLoadBalancingPolicyConfigH\x00R\x1aleast_request_experimentalB\b\n" +
	"\x06policy\"\xf1\x05\n" +
	"\rServiceConfig\x12s\n" +
	"\x15load_balancing_policy\x18\x01 \x01(\x0e2;.einride.serviceconfig.v1.ServiceConfig.LoadBalancingPolicyB\x02\x18\x01R\x13loadBalancingPolicy\x12a\n" +
	"\x15load_balancing_config\x18\x04 \x03(\v2-.einride.serviceconfig.v1.LoadBalancingConfigR\x13loadBalancingConfig\x12K\n" +
	"\rmethod_config\x18\x02 \x03(\v2&.einride.serviceconfig.v1.MethodConfigR\fmethodConfig\x12h\n" +
	"\x10retry_throttling\x18\x03 \x01(\v2=.einride.serviceconfig.v1.ServiceConfig.RetryThrottlingPolicyR\x0fretryThrottling\x12i\n" +
	"\x13health_check_config\x18\x05 \x01(\v29.einride.serviceconfig.v1.ServiceConfig.HealthCheckConfigR\x11healthCheckConfig\x1aW\n" +
	"\x15RetryThrottlingPolicy\x12\x1d\n" +
	"\n" +
	"max_tokens\x18\x01 \x01(\rR\tmaxTokens\x12\x1f\n" +
	"\vtoken_ratio\x18\x02 \x01(\x02R\n" +
	"tokenRatio\x1aT\n" +
	"\x11HealthCheckConfig\x12?\n" +
	"\fservice_name\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueR\vserviceName\"7\n" +
	"\x13LoadBalancingPolicy\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vROUND_ROBIN\x10\x01B\x86\x02\n" +
	"\x1ccom.einride.serviceconfig.v1B\x12ServiceConfigProtoP\x01ZPgo.einride.tech/grpc-service-config/gen/einride/serviceconfig/v1;serviceconfigv1\xa2\x02\x03ESX\xaa\x02\x18Einride.Serviceconfig.V1\xca\x02\x18Einride\\Serviceconfig\\V1\xe2\x02$Einride\\Serviceconfig\\V1\\GPBMetadata\xea\x02\x1aEinride::Serviceconfig::V1b\x06proto3"

var (
	file_einride_serviceconfig_v1_service_config_proto_rawDescOnce sync.Once
	file_einride_serviceconfig_v1_service_config_proto_rawDescData []byte
)

func file_einride_serviceconfig_v1_service_config_proto_rawDescGZIP() []byte {
	file_einride_serviceconfig_v1_service_config_proto_rawDescOnce.Do(func() {
		file_einride_serviceconfig_v1_service_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_einride_serviceconfig_v1_service_config_proto_rawDesc), len(file_einride_serviceconfig_v1_service_config_proto_rawDesc)))
	})
	return file_einride_serviceconfig_v1_service_config_proto_rawDescData
}

var file_einride_serviceconfig_v1_service_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_einride_serviceconfig_v1_service_config_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_einride_serviceconfig_v1_service_config_proto_goTypes = []any{
	(XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism_Type)(0), // 0: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.Type
	(ServiceConfig_LoadBalancingPolicy)(0),                                   // 1: einride.serviceconfig.v1.ServiceConfig.LoadBalancingPolicy
	(*MethodConfig)(nil),                                                     // 2: einride.serviceconfig.v1.MethodConfig
	(*PickFirstConfig)(nil),                                                  // 3: einride.serviceconfig.v1.PickFirstConfig
	(*RoundRobinConfig)(nil),                                                 // 4: einride.serviceconfig.v1.RoundRobinConfig
	(*OutlierDetectionLoadBalancingConfig)(nil),                              // 5: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig
	(*GrpcLbConfig)(nil),                                                     // 6: einride.serviceconfig.v1.GrpcLbConfig
	(*PriorityLoadBalancingPolicyConfig)(nil),                                // 7: einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig
	(*WeightedTargetLoadBalancingPolicyConfig)(nil),                          // 8: einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig
	(*XdsClusterManagerLoadBalancingPolicyConfig)(nil),                       // 9: einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig
	(*CdsConfig)(nil),                                                        // 10: einride.serviceconfig.v1.CdsConfig
	(*XdsServer)(nil),                                                        // 11: einride.serviceconfig.v1.XdsServer
	(*XdsClusterResolverLoadBalancingPolicyConfig)(nil),                      // 12: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig
	(*XdsClusterImplLoadBalancingPolicyConfig)(nil),                          // 13: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig
	(*EdsLoadBalancingPolicyConfig)(nil),                                     // 14: einride.serviceconfig.v1.EdsLoadBalancingPolicyConfig
	(*RingHashLoadBalancingConfig)(nil),                                      // 15: einride.serviceconfig.v1.RingHashLoadBalancingConfig
	(*LrsLoadBalancingPolicyConfig)(nil),                                     // 16: einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig
	(*XdsWrrLocalityLoadBalancingPolicyConfig)(nil),                          // 17: einride.serviceconfig.v1.XdsWrrLocalityLoadBalancingPolicyConfig
	(*LeastRequestLocalityLoadBalancingPolicyConfig)(nil),                    // 18: einride.serviceconfig.v1.LeastRequestLocalityLoadBalancingPolicyConfig
	(*XdsConfig)(nil),                                                        // 19: einride.serviceconfig.v1.XdsConfig
	(*LoadBalancingConfig)(nil),                                              // 20: einride.serviceconfig.v1.LoadBalancingConfig
	(*ServiceConfig)(nil),                                                    // 21: einride.serviceconfig.v1.ServiceConfig
	(*MethodConfig_Name)(nil),                                                // 22: einride.serviceconfig.v1.MethodConfig.Name
	(*MethodConfig_RetryPolicy)(nil),                                         // 23: einride.serviceconfig.v1.MethodConfig.RetryPolicy
	(*MethodConfig_HedgingPolicy)(nil),                                       // 24: einride.serviceconfig.v1.MethodConfig.HedgingPolicy
	(*OutlierDetectionLoadBalancingConfig_SuccessRateEjection)(nil),          // 25: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjection
	(*OutlierDetectionLoadBalancingConfig_FailurePercentageEjection)(nil),    // 26: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjection
	(*PriorityLoadBalancingPolicyConfig_Child)(nil),                          // 27: einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.Child
	nil, // 28: einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.ChildrenEntry
	(*WeightedTargetLoadBalancingPolicyConfig_Target)(nil), // 29: einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.Target
	nil, // 30: einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.TargetsEntry
	(*XdsClusterManagerLoadBalancingPolicyConfig_Child)(nil), // 31: einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.Child
	nil,                                  // 32: einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.ChildrenEntry
	(*XdsServer_ChannelCredentials)(nil), // 33: einride.serviceconfig.v1.XdsServer.ChannelCredentials
	(*XdsClusterResolverLoadBalancingPolicyConfig_DiscoveryMechanism)(nil), // 34: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism
	(*XdsClusterImplLoadBalancingPolicyConfig_DropCategory)(nil),           // 35: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.DropCategory
	(*LrsLoadBalancingPolicyConfig_Locality)(nil),                          // 36: einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig.Locality
	(*ServiceConfig_RetryThrottlingPolicy)(nil),                            // 37: einride.serviceconfig.v1.ServiceConfig.RetryThrottlingPolicy
	(*ServiceConfig_HealthCheckConfig)(nil),                                // 38: einride.serviceconfig.v1.ServiceConfig.HealthCheckConfig
	(*wrapperspb.BoolValue)(nil),                                           // 39: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),                                            // 40: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),                                         // 41: google.protobuf.UInt32Value
	(*structpb.Value)(nil),                                                 // 42: google.protobuf.Value
	(*wrapperspb.StringValue)(nil),                                         // 43: google.protobuf.StringValue
	(Code)(0),                                                              // 44: einride.serviceconfig.v1.Code
	(*structpb.Struct)(nil),                                                // 45: google.protobuf.Struct
}
var file_einride_serviceconfig_v1_service_config_proto_depIdxs = []int32{
	22, // 0: einride.serviceconfig.v1.MethodConfig.name:type_name -> einride.serviceconfig.v1.MethodConfig.Name
	39, // 1: einride.serviceconfig.v1.MethodConfig.wait_for_ready:type_name -> google.protobuf.BoolValue
	40, // 2: einride.serviceconfig.v1.MethodConfig.timeout:type_name -> google.protobuf.Duration
	41, // 3: einride.serviceconfig.v1.MethodConfig.max_request_message_bytes:type_name -> google.protobuf.UInt32Value
	41, // 4: einride.serviceconfig.v1.MethodConfig.max_response_message_bytes:type_name -> google.protobuf.UInt32Value
	23, // 5: einride.serviceconfig.v1.MethodConfig.retry_policy:type_name -> einride.serviceconfig.v1.MethodConfig.RetryPolicy
	24, // 6: einride.serviceconfig.v1.MethodConfig.hedging_policy:type_name -> einride.serviceconfig.v1.MethodConfig.HedgingPolicy
	40, // 7: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.interval:type_name -> google.protobuf.Duration
	40, // 8: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.base_ejection_time:type_name -> google.protobuf.Duration
	40, // 9: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.max_ejection_time:type_name -> google.protobuf.Duration
	41, // 10: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.max_ejection_percent:type_name -> google.protobuf.UInt32Value
	25, // 11: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.success_rate_ejection:type_name -> einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjection
	26, // 12: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.failure_percentage_ejection:type_name -> einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjection
	20, // 13: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	20, // 14: einride.serviceconfig.v1.GrpcLbConfig.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	40, // 15: einride.serviceconfig.v1.GrpcLbConfig.initial_fallback_timeout:type_name -> google.protobuf.Duration
	28, // 16: einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.children:type_name -> einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.ChildrenEntry
	30, // 17: einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.targets:type_name -> einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.TargetsEntry
	32, // 18: einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.children:type_name -> einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.ChildrenEntry
	33, // 19: einride.serviceconfig.v1.XdsServer.channel_creds:type_name -> einride.serviceconfig.v1.XdsServer.ChannelCredentials
	42, // 20: einride.serviceconfig.v1.XdsServer.server_features:type_name -> google.protobuf.Value
	34, // 21: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.discovery_mechanisms:type_name -> einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism
	20, // 22: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.xds_lb_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	43, // 23: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.lrs_load_reporting_server_name:type_name -> google.protobuf.StringValue
	11, // 24: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.lrs_load_reporting_server:type_name -> einride.serviceconfig.v1.XdsServer
	41, // 25: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.max_concurrent_requests:type_name -> google.protobuf.UInt32Value
	35, // 26: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.drop_categories:type_name -> einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.DropCategory
	20, // 27: einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	43, // 28: einride.serviceconfig.v1.EdsLoadBalancingPolicyConfig.lrs_load_reporting_server_name:type_name -> google.protobuf.StringValue
	20, // 29: einride.serviceconfig.v1.EdsLoadBalancingPolicyConfig.locality_picking_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	20, // 30: einride.serviceconfig.v1.EdsLoadBalancingPolicyConfig.endpoint_picking_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	36, // 31: einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig.locality:type_name -> einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig.Locality
	20, // 32: einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	20, // 33: einride.serviceconfig.v1.XdsWrrLocalityLoadBalancingPolicyConfig.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	20, // 34: einride.serviceconfig.v1.XdsConfig.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	20, // 35: einride.serviceconfig.v1.XdsConfig.fallback_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	43, // 36: einride.serviceconfig.v1.XdsConfig.lrs_load_reporting_server_name:type_name -> google.protobuf.StringValue
	3,  // 37: einride.serviceconfig.v1.LoadBalancingConfig.pick_first:type_name -> einride.serviceconfig.v1.PickFirstConfig
	4,  // 38: einride.serviceconfig.v1.LoadBalancingConfig.round_robin:type_name -> einride.serviceconfig.v1.RoundRobinConfig
	5,  // 39: einride.serviceconfig.v1.LoadBalancingConfig.outlier_detection:type_name -> einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig
	6,  // 40: einride.serviceconfig.v1.LoadBalancingConfig.grpclb:type_name -> einride.serviceconfig.v1.GrpcLbConfig
	7,  // 41: einride.serviceconfig.v1.LoadBalancingConfig.priority_experimental:type_name -> einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig
	8,  // 42: einride.serviceconfig.v1.LoadBalancingConfig.weighted_target_experimental:type_name -> einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig
	9,  // 43: einride.serviceconfig.v1.LoadBalancingConfig.xds_cluster_manager_experimental:type_name -> einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig
	10, // 44: einride.serviceconfig.v1.LoadBalancingConfig.cds_experimental:type_name -> einride.serviceconfig.v1.CdsConfig
	12, // 45: einride.serviceconfig.v1.LoadBalancingConfig.xds_cluster_resolver_experimental:type_name -> einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig
	13, // 46: einride.serviceconfig.v1.LoadBalancingConfig.xds_cluster_impl_experimental:type_name -> einride.serviceconfig.v1.XdsClusterImplLoadBalancingPolicyConfig
	15, // 47: einride.serviceconfig.v1.LoadBalancingConfig.ring_hash_experimental:type_name -> einride.serviceconfig.v1.RingHashLoadBalancingConfig
	16, // 48: einride.serviceconfig.v1.LoadBalancingConfig.lrs_experimental:type_name -> einride.serviceconfig.v1.LrsLoadBalancingPolicyConfig
	14, // 49: einride.serviceconfig.v1.LoadBalancingConfig.eds_experimental:type_name -> einride.serviceconfig.v1.EdsLoadBalancingPolicyConfig
	19, // 50: einride.serviceconfig.v1.LoadBalancingConfig.xds:type_name -> einride.serviceconfig.v1.XdsConfig
	19, // 51: einride.serviceconfig.v1.LoadBalancingConfig.xds_experimental:type_name -> einride.serviceconfig.v1.XdsConfig
	17, // 52: einride.serviceconfig.v1.LoadBalancingConfig.xds_wrr_locality_experimental:type_name -> einride.serviceconfig.v1.XdsWrrLocalityLoadBalancingPolicyConfig
	18, // 53: einride.serviceconfig.v1.LoadBalancingConfig.least_request_experimental:type_name -> einride.serviceconfig.v1.LeastRequestLocalityLoadBalancingPolicyConfig
	1,  // 54: einride.serviceconfig.v1.ServiceConfig.load_balancing_policy:type_name -> einride.serviceconfig.v1.ServiceConfig.LoadBalancingPolicy
	20, // 55: einride.serviceconfig.v1.ServiceConfig.load_balancing_config:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	2,  // 56: einride.serviceconfig.v1.ServiceConfig.method_config:type_name -> einride.serviceconfig.v1.MethodConfig
	37, // 57: einride.serviceconfig.v1.ServiceConfig.retry_throttling:type_name -> einride.serviceconfig.v1.ServiceConfig.RetryThrottlingPolicy
	38, // 58: einride.serviceconfig.v1.ServiceConfig.health_check_config:type_name -> einride.serviceconfig.v1.ServiceConfig.HealthCheckConfig
	40, // 59: einride.serviceconfig.v1.MethodConfig.RetryPolicy.initial_backoff:type_name -> google.protobuf.Duration
	40, // 60: einride.serviceconfig.v1.MethodConfig.RetryPolicy.max_backoff:type_name -> google.protobuf.Duration
	44, // 61: einride.serviceconfig.v1.MethodConfig.RetryPolicy.retryable_status_codes:type_name -> einride.serviceconfig.v1.Code
	40, // 62: einride.serviceconfig.v1.MethodConfig.HedgingPolicy.hedging_delay:type_name -> google.protobuf.Duration
	44, // 63: einride.serviceconfig.v1.MethodConfig.HedgingPolicy.non_fatal_status_codes:type_name -> einride.serviceconfig.v1.Code
	41, // 64: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjection.stdev_factor:type_name -> google.protobuf.UInt32Value
	41, // 65: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjection.enforcement_percentage:type_name -> google.protobuf.UInt32Value
	41, // 66: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjection.minimum_hosts:type_name -> google.protobuf.UInt32Value
	41, // 67: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.SuccessRateEjection.request_volume:type_name -> google.protobuf.UInt32Value
	41, // 68: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjection.threshold:type_name -> google.protobuf.UInt32Value
	41, // 69: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjection.enforcement_percentage:type_name -> google.protobuf.UInt32Value
	41, // 70: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjection.minimum_hosts:type_name -> google.protobuf.UInt32Value
	41, // 71: einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig.FailurePercentageEjection.request_volume:type_name -> google.protobuf.UInt32Value
	20, // 72: einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.Child.config:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	27, // 73: einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.ChildrenEntry.value:type_name -> einride.serviceconfig.v1.PriorityLoadBalancingPolicyConfig.Child
	20, // 74: einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.Target.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	29, // 75: einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.TargetsEntry.value:type_name -> einride.serviceconfig.v1.WeightedTargetLoadBalancingPolicyConfig.Target
	20, // 76: einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.Child.child_policy:type_name -> einride.serviceconfig.v1.LoadBalancingConfig
	31, // 77: einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.ChildrenEntry.value:type_name -> einride.serviceconfig.v1.XdsClusterManagerLoadBalancingPolicyConfig.Child
	45, // 78: einride.serviceconfig.v1.XdsServer.ChannelCredentials.config:type_name -> google.protobuf.Struct
	43, // 79: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.lrs_load_reporting_server_name:type_name -> google.protobuf.StringValue
	11, // 80: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.lrs_load_reporting_server:type_name -> einride.serviceconfig.v1.XdsServer
	41, // 81: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.max_concurrent_requests:type_name -> google.protobuf.UInt32Value
	0,  // 82: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.type:type_name -> einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.Type
	5,  // 83: einride.serviceconfig.v1.XdsClusterResolverLoadBalancingPolicyConfig.DiscoveryMechanism.outlier_detection:type_name -> einride.serviceconfig.v1.OutlierDetectionLoadBalancingConfig
	43, // 84: einride.serviceconfig.v1.ServiceConfig.HealthCheckConfig.service_name:type_name -> google.protobuf.StringValue
	85, // [85:85] is the sub-list for method output_type
	85, // [85:85] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_einride_serviceconfig_v1_service_config_proto_init() }
func file_einride_serviceconfig_v1_service_config_proto_init() {
	if File_einride_serviceconfig_v1_service_config_proto != nil {
		return
	}
	file_einride_serviceconfig_v1_code_proto_init()
	file_einride_serviceconfig_v1_service_config_proto_msgTypes[0].OneofWrappers = []any{
		(*MethodConfig_RetryPolicy_)(nil),
		(*MethodConfig_HedgingPolicy_)(nil),
	}
	file_einride_serviceconfig_v1_service_config_proto_msgTypes[18].OneofWrappers = []any{
		(*LoadBalancingConfig_PickFirst)(nil),
		(*LoadBalancingConfig_RoundRobin)(nil),
		(*LoadBalancingConfig_OutlierDetection)(nil),
		(*LoadBalancingConfig_Grpclb)(nil),
		(*LoadBalancingConfig_PriorityExperimental)(nil),
		(*LoadBalancingConfig_WeightedTargetExperimental)(nil),
		(*LoadBalancingConfig_XdsClusterManagerExperimental)(nil),
		(*LoadBalancingConfig_CdsExperimental)(nil),
		(*LoadBalancingConfig_XdsClusterResolverExperimental)(nil),
		(*LoadBalancingConfig_XdsClusterImplExperimental)(nil),
		(*LoadBalancingConfig_RingHashExperimental)(nil),
		(*LoadBalancingConfig_LrsExperimental)(nil),
		(*LoadBalancingConfig_EdsExperimental)(nil),
		(*LoadBalancingConfig_Xds)(nil),
		(*LoadBalancingConfig_XdsExperimental)(nil),
		(*LoadBalancingConfig_XdsWrrLocalityExperimental)(nil),
		(*LoadBalancingConfig_LeastRequestExperimental)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_einride_serviceconfig_v1_service_config_proto_rawDesc), len(file_einride_serviceconfig_v1_service_config_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_einride_serviceconfig_v1_service_config_proto_goTypes,
		DependencyIndexes: file_einride_serviceconfig_v1_service_config_proto_depIdxs,
		EnumInfos:         file_einride_serviceconfig_v1_service_config_proto_enumTypes,
		MessageInfos:      file_einride_serviceconfig_v1_service_config_proto_msgTypes,
	}.Build()
	File_einride_serviceconfig_v1_service_config_proto = out.File
	file_einride_serviceconfig_v1_service_config_proto_goTypes = nil
	file_einride_serviceconfig_v1_service_config_proto_depIdxs = nil
}
